{"version":3,"sources":["assets/plus.svg","views/TaskManagement/styles.js","views/TaskManagement/components/Task.jsx","views/TaskManagement/components/Column.jsx","views/TaskManagement/TaskManagement.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","theme","columnPaper","width","height","padding","margin","backgroundColor","columnTitle","fontWeight","titleDivider","color","marginTop","tasksListContainer","borderRadius","marginBottom","opacity","outline","overflowX","overflowY","boxSizing","paddingLeft","addIcon","addButton","taskCard","withStyles","task","index","onClick","classes","id","description","taskStatus","history","draggableId","isDragDisabled","provided","snapshot","Paper","className","dragHandleProps","draggableProps","innerRef","Grid","item","container","direction","justify","alignItems","xs","lg","Typography","variant","component","column","tasks","title","handleTaskCardClick","Modal","elevation","Divider","droppableId","ref","droppableProps","length","map","key","placeholder","Tooltip","Fab","size","src","AddIcon","alt","useState","task1","task2","task3","task4","columns","assigned","taskIds","inProgress","done","columnOrder","state","setState","xl","onDragEnd","result","source","destination","startColumn","endColumn","newStartTaskIds","newEndColumnTaskIds","splice","newStartColumn","newEndColumn","newTaskStatus","taskId","newTasks","newTaskData","columnId","columnObj","arrOfTasks","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eed2ed44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.12b01b1a.svg\";","const styles = (theme) => ({\n  columnPaper: {\n    width: \"275px\",\n    height: \"85vh\",\n    padding: \"20px\",\n    margin: \"15px 20px 0px 0px\",\n    backgroundColor: \"#e6e5e5\",\n  },\n  columnTitle: {\n    fontWeight: \"bold\",\n  },\n  titleDivider: {\n    height: \"2px\",\n    width: \"100%\",\n    color: \"black\",\n    marginTop: \"10px\",\n  },\n  tasksListContainer: {\n    \"&::-webkit-scrollbar\": {\n      width: \"7px\",\n    },\n    \"&::-webkit-scrollbar-track\": {\n      backgroundColor: \"#cacaca\",\n      borderRadius: \"50px\",\n      marginBottom: \"3px\",\n      opacity: \"0.3\",\n    },\n    \"&::-webkit-scrollbar-thumb\": {\n      backgroundColor: \"darkslateblue\",\n      outline: \"1px solid slategrey\",\n      borderRadius: \"50px\",\n    },\n    width: \"275px\",\n    height: \"450px\",\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n    boxSizing: \"border-box\",\n    paddingLeft: \"5px\",\n  },\n  addIcon: {\n    width: \"18px\",\n  },\n  addButton: {\n    backgroundColor: \"darkslateblue\",\n  },\n  taskCard: {\n    width: \"260px\",\n    height: \"70px\",\n    marginTop: \"10px\",\n    boxSizing: \"border-box\",\n    padding: \"10px 10px\",\n  },\n});\n\nexport default styles;\n","import React from \"react\";\r\n// prop-types\r\nimport PropTypes from \"prop-types\";\r\n// react-beautiful-dnd\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n// components\r\nimport { Paper, Grid, Typography, withStyles } from \"@material-ui/core\";\r\n// styles\r\nimport styles from \"../styles\";\r\n\r\nconst Task = ({ task, index, onClick, classes }) => {\r\n  const { id, description, history, taskStatus } = task;\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      isDragDisabled={taskStatus && taskStatus === \"done\"}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <Paper\r\n          className={classes.taskCard}\r\n          {...provided.dragHandleProps}\r\n          {...provided.draggableProps}\r\n          innerRef={provided.innerRef}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"column\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            onClick={onClick}\r\n            id={id}\r\n          >\r\n            <Grid item xs={12} lg={12}>\r\n              {description && (\r\n                <Typography variant=\"caption\" component=\"p\">\r\n                  {description}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nTask.propTypes = {\r\n  task: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    description: PropTypes.string,\r\n    history: PropTypes.shape,\r\n    taskStatus: PropTypes.string,\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  classes: PropTypes.shape({\r\n    taskCard: PropTypes.string,\r\n  }).isRequired,\r\n};\r\nexport default withStyles(styles)(Task);\r\n","import React from \"react\";\r\n// prop-types\r\nimport PropTypes from \"prop-types\";\r\n// react-beautiful-dnd\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n// components\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  Divider,\r\n  Tooltip,\r\n  Fab,\r\n  Typography,\r\n  withStyles,\r\n  Modal,\r\n} from \"@material-ui/core\";\r\nimport Task from \"./Task\";\r\n// styles\r\nimport styles from \"../styles\";\r\n// icons\r\nimport AddIcon from \"../../../assets/plus.svg\";\r\n\r\nconst Column = ({ column, tasks, classes }) => {\r\n  const { title, id } = column;\r\n  const handleTaskCardClick = () => {};\r\n  const handleNewTaskButtonClick = () => {};\r\n  return (\r\n    <>\r\n      {/* <Modal /> */}\r\n      <Modal />\r\n      <Grid\r\n        component={Paper}\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        elevation={3}\r\n        className={classes.columnPaper}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={12}\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"body2\" className={classes.columnTitle}>\r\n              {title}\r\n            </Typography>\r\n            <Divider className={classes.titleDivider} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Droppable droppableId={id}>\r\n              {(provided) => (\r\n                <div\r\n                  className={classes.tasksListContainer}\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  {tasks.length > 0 &&\r\n                    tasks.map(\r\n                      (task, index) =>\r\n                        task && (\r\n                          <Task\r\n                            key={task.id}\r\n                            id={task.id}\r\n                            index={index}\r\n                            task={task}\r\n                            onClick={handleTaskCardClick}\r\n                          />\r\n                        )\r\n                    )}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"flex-end\"\r\n            justify=\"flex-end\"\r\n          >\r\n            <Grid item>\r\n              {id === \"assigned\" && (\r\n                <Tooltip title=\"Add New Task\">\r\n                  <Fab\r\n                    onClick={handleNewTaskButtonClick}\r\n                    className={classes.addButton}\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                  >\r\n                    <img\r\n                      src={AddIcon}\r\n                      alt=\"add icon\"\r\n                      className={classes.addIcon}\r\n                    />\r\n                  </Fab>\r\n                </Tooltip>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nColumn.propTypes = {\r\n  classes: PropTypes.shape({\r\n    columnPaper: PropTypes.string,\r\n    columnTitle: PropTypes.string,\r\n    titleDivider: PropTypes.string,\r\n    tasksListContainer: PropTypes.string,\r\n    addButton: PropTypes.string,\r\n    addIcon: PropTypes.string,\r\n  }).isRequired,\r\n  column: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }).isRequired,\r\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Column);\r\n","import React, { useState } from \"react\";\r\n// prop-types\r\nimport PropTypes from \"prop-types\";\r\n// beautiful-react-dnd\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n// components\r\nimport { withStyles, Grid } from \"@material-ui/core\";\r\nimport { Column } from \"./components\";\r\n\r\n// styles\r\nimport styles from \"./styles\";\r\n\r\nconst TaskManagement = ({ classes }) => {\r\n  const [state, setState] = useState({\r\n    tasks: {\r\n      task1: {\r\n        description: \"hello\",\r\n        id: \"task1\",\r\n        history: {},\r\n        taskStatus: \"assigned\",\r\n      },\r\n      task2: {\r\n        description: \"hello\",\r\n        id: \"task2\",\r\n        history: {},\r\n        taskStatus: \"assigned\",\r\n      },\r\n      task3: {\r\n        description: \"hello\",\r\n        id: \"task3\",\r\n        history: {},\r\n        taskStatus: \"assigned\",\r\n      },\r\n      task4: {\r\n        description: \"hello\",\r\n        id: \"task4\",\r\n        history: {},\r\n        taskStatus: \"assigned\",\r\n      },\r\n    },\r\n    columns: {\r\n      assigned: {\r\n        id: \"assigned\",\r\n        title: \"Assigned\",\r\n        taskIds: [\"task1\", \"task2\", \"task3\", \"task4\"],\r\n      },\r\n      inProgress: {\r\n        id: \"inProgress\",\r\n        title: \"In progress\",\r\n        taskIds: [],\r\n      },\r\n      done: {\r\n        id: \"done\",\r\n        title: \"Done\",\r\n        taskIds: [],\r\n      },\r\n    },\r\n    columnOrder: [\"assigned\", \"inProgress\", \"done\"],\r\n  });\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination, draggableId } = result;\r\n    const { columns } = state;\r\n\r\n    // user dropped it outside all droppables\r\n    if (!destination) return;\r\n    // user didn't change item position, dragged and\r\n    // -> dropped at the same possition\r\n    const startColumn = { ...columns[source.droppableId] };\r\n    const endColumn = { ...columns[destination.droppableId] };\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    )\r\n      return;\r\n\r\n    const newStartTaskIds = [...startColumn.taskIds];\r\n    const newEndColumnTaskIds = [...endColumn.taskIds];\r\n\r\n    // reordering inside the same column\r\n    newStartTaskIds.splice(source.index, 1);\r\n\r\n    if (startColumn.id === endColumn.id) {\r\n      newStartTaskIds.splice(destination.index, 0, draggableId);\r\n      const newStartColumn = {\r\n        ...startColumn,\r\n        taskIds: newStartTaskIds,\r\n      };\r\n      setState({\r\n        ...state,\r\n        columns: { ...columns, [newStartColumn.id]: newStartColumn },\r\n      });\r\n      return;\r\n    }\r\n\r\n    // source !== destination\r\n    // checking on accepted flows\r\n    // assigned => inProgress => done,\r\n    // inProgress => assigned || inProgress => done,\r\n    // done => nowhere\r\n    if (\r\n      source.droppableId === \"assigned\" &&\r\n      destination.droppableId !== \"inProgress\"\r\n    )\r\n      return;\r\n    if (source.droppableId === \"done\") return;\r\n    // handling accepted flows\r\n    const newStartColumn = {\r\n      ...startColumn,\r\n      taskIds: newStartTaskIds,\r\n    };\r\n\r\n    newEndColumnTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newEndColumn = {\r\n      ...endColumn,\r\n      taskIds: newEndColumnTaskIds,\r\n    };\r\n\r\n    const newTaskStatus = newEndColumn.id;\r\n    const taskId = draggableId;\r\n    const newTasks = { ...state.tasks };\r\n    const newTaskData = { ...newTasks[taskId] };\r\n    newTaskData.taskStatus = newTaskStatus;\r\n    newTasks[taskId] = newTaskData;\r\n\r\n    setState({\r\n      ...state,\r\n      tasks: newTasks,\r\n      columns: {\r\n        ...columns,\r\n        [newStartColumn.id]: newStartColumn,\r\n        [newEndColumn.id]: newEndColumn,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      xs={12}\r\n      xl={12}\r\n      direction=\"row\"\r\n      justify=\"space-evenly\"\r\n      alignItems=\"center\"\r\n    >\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {state.columnOrder.map((columnId) => {\r\n          const columnObj = state.columns[columnId];\r\n          const arrOfTasks = columnObj.taskIds.map(\r\n            (taskId) => state.tasks[taskId]\r\n          );\r\n          return (\r\n            <Column key={columnId} column={columnObj} tasks={arrOfTasks} />\r\n          );\r\n        })}\r\n      </DragDropContext>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nTaskManagement.propTypes = {\r\n  classes: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(TaskManagement);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"@material-ui/core\";\nimport { TaskManagement } from \"./views\";\n\nfunction App() {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"center\"\n      justify=\"center\"\n      className=\"root\"\n    >\n      <TaskManagement />\n    </Grid>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}